// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  displayname   String?     @unique
  accounts      Account[]
  post          Post[]
  Like          Like[]
  Bookmark      Bookmarks[]
  comments      Comment[]
  repost        Repost[]

  recieviedNotification Notification[] @relation("Recipient")
  issuedNotification    Notification[] @relation("Issuer")

  bio        String?
  background String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  following Follow[] @relation("following")
  followers Follow[] @relation("followers")
}




model Follow {
  followerId  String
  follower    User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User     @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  timeStamp   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Post {
  id                 String         @id @default(uuid())
  content            String
  userId             String
  createdAt          DateTime       @default(now())
  user               User           @relation(fields: [userId], references: [id])
  attachments        Media[]
  like               Like[]
  Bookmark           Bookmarks[]
  Repost             Repost[]
  linkedNotification Notification[]
  comments           Comment[]

  @@map("post")
}

model Repost {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id          String   @id @default(uuid())
  content     String
  userId      String
  attachments Media[]
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum MediaType {
  IMG
  VID
}

model Media {
  id        String    @id @default(cuid())
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  commentId String?
  comment   Comment?  @relation(fields: [commentId], references: [id])
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
}

model Like {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Bookmarks {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Notification {
  id            String           @id @default(cuid())
  recipientID   String
  recipientuser User             @relation("Recipient", fields: [recipientID], references: [id], onDelete: Cascade)
  issuerId      String
  issueruser    User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId        String?
  post          Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  read          Boolean          @default(false)
  type          NotificationType
  createdAt     DateTime         @default(now())
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
